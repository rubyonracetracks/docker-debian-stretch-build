#!/bin/bash

T_BEGIN=$(date +'%s')

echo '--------------------'
echo 'ls -l /usr/local/bin'
ls -l /usr/local/bin

# Prepare apt-get
/usr/local/bin/aptget

# Set environment variables to cut down on annoying warning messages
export DEBIAN_FRONTEND='noninteractive'
export DEBCONF_NOWARNINGS='true'
export HOME=/root
export LC_ALL=C

echo '######################'
echo 'BEGIN dev-root actions'
echo '######################'

echo '----------------------'
echo 'apt-get install -y git'
apt-get install -y git

echo '-------------------------'
echo 'apt-get install -y puppet'
apt-get install -y puppet

echo '+++++++++++++++++++++'
echo 'BEGIN installing Chef'
echo '---------------------------------------'
echo 'apt-get install -y curl ca-certificates'
apt-get install -y curl ca-certificates
echo '-------------------------------------------------------'
echo 'curl -L https://www.opscode.com/chef/install.sh | bash;'
curl -L https://www.opscode.com/chef/install.sh | bash;
rm -f /tmp/chef*deb;
chef-solo -v
echo 'FINISHED installing Chef'
echo '++++++++++++++++++++++++'

echo '------------------------------------'
echo 'apt-get install -y python2.7 ansible'
apt-get install -y python2.7 ansible

echo '+++++++++++++++++++++++++++++++++++++'
echo 'BEGIN installing Heroku prerequisites'
echo '+++++++++++++++++++++++++++++++++++++'

echo '--------------------------------------------------------------------------------------------------------------------'
echo 'sudo apt-get install -y git wget ca-certificates openssh-client software-properties-common apt-transport-https gnupg'
sudo apt-get install -y git wget ca-certificates openssh-client software-properties-common apt-transport-https gnupg

echo '++++++++++++++++++++++++++++++++++++++++'
echo 'FINISHED installing Heroku prerequisites'
echo '++++++++++++++++++++++++++++++++++++++++'

echo '+++++++++++++++++++++++'
echo 'BEGIN installing Heroku'
echo '+++++++++++++++++++++++'

# BEGIN: steps from https://cli-assets.heroku.com/install-standalone.sh
ARCH=`uname -m`
if [ "$ARCH" == "x86_64" ]; then
  ARCH=x64
elif [ "$ARCH" == "i686" ]; then
  ARCH=x86
else
  echo "unsupported arch: $ARCH"
  exit 1
fi
echo "Architecture: $ARCH"

echo 'Downloading Heroku to /usr/local/lib'
cd /usr/local/lib
curl https://cli-assets.heroku.com/heroku-linux-$ARCH.tar.gz | tar xz

echo 'ln -s /usr/local/lib/heroku/bin/heroku /usr/local/bin/heroku'
ln -s /usr/local/lib/heroku/bin/heroku /usr/local/bin/heroku
# END: steps from https://cli-assets.heroku.com/install-standalone.sh

echo '--------------'
echo 'heroku version'
su -c 'heroku version' winner

echo '++++++++++++++++++++++++++'
echo 'FINISHED installing Heroku'
echo '++++++++++++++++++++++++++'

# Needed for NVM
echo '---------------------------------------------------------------------------'
echo 'apt-get install -y build-essential libssl-dev curl wget git ca-certificates'
apt-get install -y build-essential libssl-dev curl wget git ca-certificates

echo '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
echo 'BEGIN installing and configuring PostgreSQL for Ruby on Rails'

echo '-----------------------------'
echo 'apt-get install -y postgresql'
apt-get install -y postgresql

PG_VERSION="$(ls /etc/postgresql)"

echo '---------------------------------------'
echo 'Backing up original PostgreSQL settings'
PG_CONF="/etc/postgresql/$PG_VERSION/main/postgresql.conf"
PG_CONF_ORIG="/etc/postgresql/$PG_VERSION/main/postgresql_orig.conf"
PG_CONF_PREF="/etc/postgresql/$PG_VERSION/main/postgresql_preferred.conf"
PG_HBA="/etc/postgresql/$PG_VERSION/main/pg_hba.conf"
PG_HBA_ORIG="/etc/postgresql/$PG_VERSION/main/pg_hba_orig.conf"
PG_HBA_PREF="/etc/postgresql/$PG_VERSION/main/pg_hba_preferred.conf"
cp $PG_CONF $PG_CONF_ORIG
cp $PG_HBA $PG_HBA_ORIG

echo '--------------------'
echo "Configuring $PG_CONF"
sed -i 's/^port = .*/port = 5432/' $PG_CONF
sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/" $PG_CONF
cp $PG_CONF $PG_CONF_PREF

echo '-------------------'
echo "Configuring $PG_HBA"
echo "# Database administrative login by Unix domain socket" | tee $PG_HBA
echo "local   all             postgres                                peer" | tee -a $PG_HBA
echo "" | tee -a $PG_HBA
echo "# TYPE  DATABASE        USER            ADDRESS                 METHOD" | tee -a $PG_HBA
echo "" | tee -a $PG_HBA
echo "# local is for Unix domain socket connections only" | tee -a $PG_HBA
echo "local   all             all                                     md5" | tee -a $PG_HBA
echo "" | tee -a $PG_HBA
echo "# IPv4 local connections:" | tee -a $PG_HBA
echo "host    all             all             0.0.0.0/0            md5" | tee -a $PG_HBA
echo "" | tee -a $PG_HBA
echo "# IPv6 local connections:" | tee -a $PG_HBA
echo "host    all             all             ::1/128                 md5" | tee -a $PG_HBA
echo "" | tee -a $PG_HBA
echo "host    all             all             all                     md5" | tee -a $PG_HBA
cp $PG_HBA $PG_HBA_PREF

# The PostgreSQL server is NOT automatically started in Docker.
# Setting the 'smart' flag (instead of the default 'fast' flag) prevents
# the error message "Problem: FATAL:  the database system is starting up"
echo '------------------------'
echo 'Configuring /etc/rc.conf'
echo 'postgresql_flags="-s -m smart"' > /etc/rc.conf

echo 'FINISHED installing and configuring PostgreSQL for Ruby on Rails'
echo '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'

echo '++++++++++++++++++++++++++++++++++++++++++++'
echo 'BEGIN installing rbenv prerequisites as root'
echo '++++++++++++++++++++++++++++++++++++++++++++'

# Needed for rbenv itself:
apt-get install -y bzip2
apt-get install -y git ca-certificates curl build-essential
apt-get install -y libreadline-dev zlib1g-dev

apt-get install -y libssl1.0-dev # Needed to install Ruby 2.3.*

apt-get install -y libpq-dev # Needed for pg gem
apt-get install -y sqlite3 # SQLite3
apt-get install -y libsqlite3-dev # Needed for sqlite3 gem
apt-get install -y redis-server # Some Rails apps use Redis
apt-get install -y graphviz # Needed for railroady and rails-erd gems
apt-get install -y imagemagick # Needed for image parameters in Rails projects

echo '+++++++++++++++++++++++++++++++++++++++++++++++'
echo 'FINISHED installing rbenv prerequisites as root'
echo '+++++++++++++++++++++++++++++++++++++++++++++++'

echo '#########################'
echo 'FINISHED dev-root actions'
echo '#########################'

su -c /usr/local/bin/dev-user winner
/usr/local/bin/finalize-root
su -c /usr/local/bin/finalize-user winner
su -c /usr/local/bin/check-dev winner

T_FINISH=$(date +'%s')
T_ELAPSED=$(($T_FINISH-$T_BEGIN))
echo '---------------------------------------------------'
echo 'Time to transform the min image into the dev image:'
echo "$(($T_ELAPSED / 60)) minutes and $(($T_ELAPSED % 60)) seconds"

